plugins {
    id 'java-library'
    id "idea"
    id 'jacoco'
    id "com.adarshr.test-logger" version "4.0.0"
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id 'ru.vyarus.java-lib' version '3.0.0'
    id 'signing'
    id 'net.researchgate.release' version '3.0.2'
}

def isBuildSnapshot = version.toString().endsWith("-SNAPSHOT")

repositories {
    mavenLocal()
    mavenCentral()
    if (isBuildSnapshot) {
        maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
    }
}

sourceCompatibility = 21
targetCompatibility = 21

group "<%= namespace %>.plugin"
description "<%= description %>"

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.add("-parameters")
}

dependencies {
    // Platform
    annotationProcessor enforcedPlatform("io.kestra:platform:$kestraVersion")
    implementation enforcedPlatform("io.kestra:platform:$kestraVersion")
    api enforcedPlatform("io.kestra:platform:$kestraVersion")

    // lombok
    annotationProcessor "org.projectlombok:lombok"
    compileOnly "org.projectlombok:lombok"

    // Kestra
    annotationProcessor "io.kestra:processor"
    compileOnly "io.kestra:core"

    // Logs
    compileOnly "org.slf4j:slf4j-api"

    // libs included in the final jar
    // TODO remove it after using the GitHub template as your plugin may not need it
    api "com.google.code.gson:gson:2.11.0"
}


/**********************************************************************************************************************\
 * Test
 **********************************************************************************************************************/
test {
    useJUnitPlatform()
}

testlogger {
    theme "mocha-parallel"
    showExceptions true
    showFullStackTraces true
    showStandardStreams true
    showPassedStandardStreams false
    showSkippedStandardStreams true
}

dependencies {
    // Platform
    testAnnotationProcessor enforcedPlatform("io.kestra:platform:$kestraVersion")
    testImplementation enforcedPlatform("io.kestra:platform:$kestraVersion")

    // lombok
    testAnnotationProcessor "org.projectlombok:lombok"
    testCompileOnly "org.projectlombok:lombok"

    // micronaut
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testAnnotationProcessor "io.micronaut.validation:micronaut-validation-processor"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testImplementation "io.micronaut:micronaut-jackson-databind"

    // Kestra
    testAnnotationProcessor "io.kestra:processor"
    testImplementation "io.kestra:core"
    testImplementation "io.kestra:tests"
    // Kestra deps needed only to have a runner for unit tests
    testImplementation "io.kestra:repository-memory"
    testImplementation "io.kestra:runner-memory"
    testImplementation "io.kestra:storage-local"

    // test
    testImplementation "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.hamcrest:hamcrest"
    testImplementation "org.hamcrest:hamcrest-library"
}

/**********************************************************************************************************************\
 * Allure Reports
 **********************************************************************************************************************/
dependencies {
    testImplementation enforcedPlatform("io.kestra:platform:$kestraVersion")
    testImplementation "io.qameta.allure:allure-junit5"
}

configurations {
    agent {
        canBeResolved = true
        canBeConsumed = true
    }
}

dependencies {
    agent "org.aspectj:aspectjweaver:1.9.22.1"
}

test {
    jvmArgs = [ "-javaagent:${configurations.agent.singleFile}" ]
}

/**********************************************************************************************************************\
 * Jacoco
 **********************************************************************************************************************/
test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
}

/**********************************************************************************************************************\
 * Publish
 **********************************************************************************************************************/
tasks.withType(GenerateModuleMetadata).configureEach {
    // Suppression this validation error as we want to enforce the Kestra platform
    suppressedValidationErrors.add('enforced-platform')
}

jar {
    manifest {
        attributes(
            "X-Kestra-Name": project.name,
            "X-Kestra-Title": "<%= name %>",
            "X-Kestra-Group": project.group + ".<%= name %>",
            "X-Kestra-Description": project.description,
            "X-Kestra-Version": project.version
        )
    }
}

shadowJar {
    archiveClassifier.set(null)
    mergeServiceFiles()
}

/**********************************************************************************************************************\
 * Dev
 **********************************************************************************************************************/
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}
